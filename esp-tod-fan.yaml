esphome:
  name: esp-tod-fan
  platform: ESP8266
  board: nodemcu
  includes:
    - fan_float_output.h
wifi:
  networks:
  - ssid: !secret ssid
    password: !secret wifi_password

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret key

ota:
  password: !secret ota_password

output:
- platform: custom
  type: float
  lambda: |-
    auto my_custom_float_output = new MyCustomFloatOutput();
    App.register_component(my_custom_float_output);
    return {my_custom_float_output};
  outputs:
    id: fan_float    
fan:
  - platform: speed
    name: "Tod room fan"
    speed_count: 3
    output: fan_float
sensor:
  - platform: dht
    model: DHT22
    pin: D2
    temperature:
      name: "Tod room temperature"
      device_class: "temperature"
      state_class: "measurement"
    humidity:
      name: "Tod room humidity"
      device_class: "humidity"
      state_class: "measurement"
    update_interval: 60s
  - platform: wifi_signal
    name: "Tod room WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "Tod room uptime seconds"
    id: uptime_s
    
binary_sensor:
  - platform: status
    name: "Tod room Status"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Tod room IP Address"
    ssid:
      name: "Tod room SSID"
  - platform: template
    name: "Tod room uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start

switch:
  - platform: restart
    name: "Tod room Restart"
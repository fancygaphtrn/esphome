esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m

wifi:
  networks:
  - ssid: !secret ssid
    password: !secret wifi_password

# Enable logging
logger:
  
# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

web_server:
  port: 80

time:
  - platform: homeassistant
    id: homeassistant_time
    
status_led:
  pin:
    number: GPIO5

output:
  - platform: gpio
    id: led1
    pin: GPIO16

switch:
  - platform: gpio
    name: $upper_devicename
    id: switch1
    pin: GPIO4
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - output.turn_on: led1
    on_turn_off:
      - output.turn_off: led1
  - platform: restart
    name: $upper_devicename Restart

binary_sensor:
  - platform: status
    name: $upper_devicename Status
  - platform: gpio
    id: button1
    pin:
      number: GPIO14
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      - switch.toggle: switch1
        
sensor:
  - platform: wifi_signal
    name: $upper_devicename WiFi Signal
    update_interval: 60s
  - platform: uptime
    disabled_by_default: true
    name: $upper_devicename uptime seconds
    id: uptime_s
  - platform: pulse_counter
    disabled_by_default: true
    pin: GPIO12
    id: "gpio12"
    name: $upper_devicename GPIO12 counter
    update_interval: 10s
    on_value:
      - sensor.template.publish:
          id: voltage
          state: !lambda 'return id(gpio12).state * $voltage_multiplier;'
      - sensor.template.publish:
          id: amps
          state: !lambda 'return id(watts).state / id(voltage).state;'
  - platform: pulse_counter
    disabled_by_default: true
    pin: GPIO13
    id: "gpio13"
    name: $upper_devicename GPIO13 counter
    update_interval: 10s
    on_value:
      - sensor.template.publish:
          id: watts
          state: !lambda  |-
            if (id(switch1).state) {
              return id(gpio13).state * $watts_multiplier;
            } else {
              return 0;
            }
      - sensor.template.publish:
          id: amps
          state: !lambda 'return id(watts).state / id(voltage).state;'
  - platform: template 
    id: voltage
    name: $upper_devicename Voltage
    unit_of_measurement: "V"
  - platform: template 
    id: watts
    name: $upper_devicename Watts
    unit_of_measurement: "W"
  - platform: template 
    id: amps
    unit_of_measurement: "A"
    name: $upper_devicename Amps
    accuracy_decimals: 3
  - platform: total_daily_energy
    name: $upper_devicename Total Daily Energy
    power_id: watts
    filters:
        - multiply: 0.001
    unit_of_measurement: kWh
    device_class: energy

text_sensor:
  - platform: wifi_info
    ip_address:
      name: $upper_devicename IP Address
    ssid:
      name: $upper_devicename SSID
  - platform: template
    name: $upper_devicename uptime
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
  - platform: template
    name: "${upper_devicename} Current time"
    lambda: |-
      char str[17];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return  { str };
    update_interval: 60s

substitutions:
#  name: esp-kilovault1
  name: esp-kilovault2
  device_description: "Monitor a Kilovault Battery Management System via BLE"
  throttle_time: 10s
#  mac_address: 30:45:11:FB:0A:52
#  battery: Battery1
  mac_address: 50:33:8B:12:69:42
  battery: Battery2

esphome:
  name: ${name}
  comment: ${device_description}

esp32:
  board: nodemcu-32s
#  board: lolin_d32_pro
  framework:
    type: esp-idf

external_components:
  - source: my_components
    refresh: 0s

wifi:
  networks:
  - ssid: Blacksmith
    password: !secret wifi_password

api:
  encryption:
    key: !secret key

ota:
  password: !secret ota_password
  on_begin:
    then:
    - switch.turn_off: bluetooth_connection

logger:
  level: DEBUG
#  logs:
#    kilovault_bms_ble: VERY_VERBOSE
#    ble_client: ERROR
#    esp32_ble: ERROR
#    esp32_ble_tracker: ERROR
#    scheduler: DEBUG
#    component: DEBUG
#    sensor: DEBUG
#    api: DEBUG
#    api.service: DEBUG

time:
  - platform: homeassistant
    id: homeassistant_time
    
esp32_ble_tracker:
  scan_parameters:
    # Defaults
    #duration: 300s
    #interval: 320ms
    #window: 30ms
    #active: true
    #continous: true
    interval: 640ms
    window: 20ms
    active: false
  on_ble_advertise:
    - mac_address: ${mac_address}
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
            }
            ESP_LOGD("ble_adv", "  Advertised service data:");
            for (auto data : x.get_service_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
                for(int i = 0; i < data.data.size(); i++) {
                    ESP_LOGD("ble_adv", "        - %x %c ", data.data[i], data.data[i]);
                }
            }    
            ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
            for (auto data : x.get_manufacturer_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
                for(int i = 0; i < data.data.size(); i++) {
                    ESP_LOGD("ble_adv", "        - %x %c ", data.data[i], data.data[i]);
                }
            }

ble_client:
  - mac_address: ${mac_address}
    id: client1
    on_connect:
      then:
        - lambda: |-
            ESP_LOGD("${battery} ${mac_address}", "Connected to BLE device");
    on_disconnect:
      then:
        - lambda: |-
            ESP_LOGD("${battery} ${mac_address}", "Disconnected from BLE device");
            if (id(bluetooth_connection).state) {
              id(restart_device).turn_on();
            }

kilovault_bms_ble:
  - ble_client_id: client1
    id: bms1
    update_interval: 10s

sensor:
  - platform: total_daily_energy
    name: "${battery} Total Daily Energy battery in"
    power_id: charging_power
    filters:
        - multiply: 0.001
    unit_of_measurement: kWh
    device_class: energy
  - platform: total_daily_energy
    name: "${battery} Total Daily Energy battery out"
    power_id: discharging_power
    filters:
        - multiply: 0.001
    unit_of_measurement: kWh
    device_class: energy
  - platform: wifi_signal
    name: $name WiFi Signal
    update_interval: 60s
  - platform: uptime
    disabled_by_default: true
    name: $name uptime seconds
    id: uptime_s
  - platform: kilovault_bms_ble
    kilovault_bms_ble_id: bms1
    voltage:
      name: "${battery} voltage"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    current:
      name: "${battery} current"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    power:
      name: "${battery} power"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    charging_power:
      name: "${battery} charging power"
      id: charging_power
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    discharging_power:
      name: "${battery} discharging power"
      id: discharging_power
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    cycles:
      name: "${battery} cycles"
      filters:
        - throttle: 60s
    state_of_charge:
      name: "${battery} state of charge"
      filters:
        - throttle: 60s
    total_capacity:
      name: "${battery} total capacity"
      filters:
        - throttle: 60s
    current_capacity:
      name: "${battery} current capacity"
      filters:
        - throttle: 60s
    status:
      name: "${battery} status"
      filters:
        - throttle: 60s
    afestatus:
      name: "${battery} afe status"
      filters:
        - throttle: 60s
    min_cell_voltage:
      name: "${battery} min cell voltage"
      filters:
        - throttle: 60s
    max_cell_voltage:
      name: "${battery} max cell voltage"
      filters:
        - throttle: 60s
    min_voltage_cell:
      name: "${battery} min voltage cell"
      filters:
        - throttle: 60s
    max_voltage_cell:
      name: "${battery} max voltage cell"
      filters:
        - throttle: 60s
    delta_cell_voltage:
      name: "${battery} delta cell voltage"
      filters:
        - throttle: 60s
    temperature:
      name: "${battery} temperature"
      filters:
        - throttle: 60s
    cell_voltage_1:
      name: "${battery} cell voltage 1"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    cell_voltage_2:
      name: "${battery} cell voltage 2"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    cell_voltage_3:
      name: "${battery} cell voltage 3"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan
    cell_voltage_4:
      name: "${battery} cell voltage 4"
      filters:
        - throttle_average: ${throttle_time}
        - filter_out: nan

text_sensor:
  - platform: wifi_info
    ip_address:
      name: $name IP Address
    ssid:
      name: $name SSID
  - platform: template
    name: $name uptime
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[60];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
  - platform: kilovault_bms_ble
    kilovault_bms_ble_id: bms1
    battery_mac:
      name: "${battery} battery MAC"

switch:
  - platform: ble_client
    ble_client_id: client1
    id: bluetooth_connection
    name: "${battery} enable bluetooth connection"
  - platform: shutdown
    name: "${name} Shutdown"
  - platform: safe_mode
    name: "${name} Restart (Safe Mode)"
  - platform: restart
    id: restart_device
    name: "${name} Restart"
    
binary_sensor:
  - platform: status
    name: $name Status
    
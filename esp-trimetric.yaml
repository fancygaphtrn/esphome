substitutions:
  uname: Trimetric
  lname: trimetric

esphome:
  name: esp-trimetric
  platform: ESP8266
  board: nodemcu
  includes:
    - uart_trimetric.h

web_server:
  port: 80
  
wifi:
  power_save_mode: none
  networks:
  - ssid: Blacksmith
    password: !secret wifi_password

# Enable Home Assistant API
api:
  encryption:
    key: !secret key

ota:
  password: !secret ota_password

logger:
  #level: INFO #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

uart:
  id: uart_bus
  tx_pin: D8
  rx_pin: D7
  baud_rate: 2400

time:
  - platform: homeassistant
    id: homeassistant_time
    
binary_sensor:
  - platform: status
    name: "${uname} Status"

sensor:
  - platform: wifi_signal
    name: "${uname} WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "${uname} uptime seconds"
    id: uptime_s
#  - platform: total_daily_energy
#    name: "${uname} Total Daily Energy battery"
#    power_id: trimetric_watts
#    filters:
#        - multiply: 0.001
#    unit_of_measurement: kWh
#    device_class: energy
  - platform: total_daily_energy
    name: "${uname} Total Daily Energy battery in"
    power_id: trimetric_battery_in
    filters:
        - multiply: 0.001
    unit_of_measurement: kWh
    device_class: energy
  - platform: total_daily_energy
    name: "${uname} Total Daily Energy battery out"
    power_id: trimetric_battery_out
    filters:
        - multiply: 0.001
    unit_of_measurement: kWh
    device_class: energy
  - platform: custom
    lambda: |-
      auto my_custom_sensor = new UartTrimetricSensor(id(uart_bus));
      App.register_component(my_custom_sensor);
      return {my_custom_sensor->s_V,my_custom_sensor->s_FV,my_custom_sensor->s_A,my_custom_sensor->s_FA,my_custom_sensor->s_AH,my_custom_sensor->s_percent,my_custom_sensor->s_W,my_custom_sensor->s_DSC,my_custom_sensor->s_DSE,my_custom_sensor->s_FW,my_custom_sensor->s_W_in,my_custom_sensor->s_W_out};
    sensors:
    - name: "${uname} Volts"
      unit_of_measurement: V
      accuracy_decimals: 1
      device_class: voltage
      state_class: measurement
      filters:
        - throttle_average: 5s
        - filter_out: nan
    - name: "${uname} Filtered Volts"
      unit_of_measurement: V
      accuracy_decimals: 1
      device_class: voltage
      state_class: measurement
      filters:
        - throttle_average: 20s
        - filter_out: nan
    - name: "${uname} Amps"
      unit_of_measurement: A
      accuracy_decimals: 1
      device_class: current
      state_class: measurement
      filters:
        - throttle_average: 5s
        - filter_out: nan
    - name: "${uname} Filtered Amps"
      unit_of_measurement: A
      id: trimetric_amps
      accuracy_decimals: 1
      device_class: current
      state_class: measurement
      filters:
        - throttle_average: 20s
        - filter_out: nan
    - name: "${uname} Amp hours"
      unit_of_measurement: AH
      accuracy_decimals: 2
      state_class: measurement
      filters:
        - throttle_average: 20s
        - filter_out: nan
    - name: "${uname} Percent"
      unit_of_measurement: "%"
      accuracy_decimals: 1
      state_class: measurement
    - name: "${uname} Watts"
      id: trimetric_watts
      unit_of_measurement: W
      accuracy_decimals: 1
      device_class: power
      state_class: measurement
      filters:
        - throttle_average: 5s
        - filter_out: nan
    - name: "${uname} DSC"
      unit_of_measurement: Days
      accuracy_decimals: 2
      state_class: measurement
    - name: "${uname} DSE"
      unit_of_measurement: Days
      accuracy_decimals: 2
      state_class: measurement
    - name: "${uname} Filtered Watts"
      unit_of_measurement: W
      accuracy_decimals: 1
      device_class: power
      state_class: measurement
      filters:
        - throttle_average: 20s
        - filter_out: nan
    - name: "${uname} battery in"
      id: trimetric_battery_in
      unit_of_measurement: W
      accuracy_decimals: 1
      device_class: power
      state_class: measurement
      filters:
        - throttle_average: 5s
        - filter_out: nan
    - name: "${uname} battery out"
      id: trimetric_battery_out
      unit_of_measurement: W
      accuracy_decimals: 1
      device_class: power
      state_class: measurement
      filters:
        - throttle_average: 5s
        - filter_out: nan

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${uname} IP Address"
    ssid:
      name: "${uname} SSID"
  - platform: template
    name: "${uname} uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[60];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
  - platform: template
    name: "${uname} Current time"
    lambda: |-
      char str[17];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      return  { str };
    update_interval: 60s
    
switch:
  - platform: restart
    name: "${uname} Restart"    

    